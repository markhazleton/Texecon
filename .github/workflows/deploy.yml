name: CI and Deploy to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Prevent overlapping page deployments
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  # Set your custom domain for GitHub Pages
  CUSTOM_DOMAIN: texecon.com

permissions:
  contents: read

jobs:
  build:
    name: Build (and type-check)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Determine Vite base path and site URL
        shell: bash
        run: |
          # Prefer explicit CUSTOM_DOMAIN when provided
          if [ -n "${CUSTOM_DOMAIN}" ]; then
            echo "Using CUSTOM_DOMAIN=$CUSTOM_DOMAIN"
            echo "VITE_BASE_PATH=/" >> "$GITHUB_ENV"
            echo "SITE_BASE_URL=https://${CUSTOM_DOMAIN}" >> "$GITHUB_ENV"
            # Ensure CNAME exists for Pages to register the custom domain
            echo "${CUSTOM_DOMAIN}" > client/public/CNAME
          elif [ -f client/public/CNAME ]; then
            echo "Detected CNAME file"
            echo "VITE_BASE_PATH=/" >> "$GITHUB_ENV"
            DOMAIN=$(tr -d '\n\r' < client/public/CNAME)
            echo "SITE_BASE_URL=https://$DOMAIN" >> "$GITHUB_ENV"
          else
            # Project pages default to '/<repo>/'
            echo "VITE_BASE_PATH=/${GITHUB_REPOSITORY#*/}/" >> "$GITHUB_ENV"
            OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
            REPO=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
            echo "SITE_BASE_URL=https://$OWNER.github.io/$REPO" >> "$GITHUB_ENV"
          fi

      - name: Install dependencies (incl. dev)
        run: npm ci --include=dev

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm run test:run

      - name: Check test coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Validate build artifacts
        run: |
          test -f target/index.html || (echo "Missing index.html" && exit 1)
          test -f target/version.json || (echo "Missing version.json" && exit 1)
          test -f target/sitemap.xml || (echo "Missing sitemap.xml" && exit 1)
          test -f target/robots.txt || (echo "Missing robots.txt" && exit 1)
          echo "âœ… All critical build artifacts present"

      # Only prepare and upload the Pages artifact on non-PR events
      - name: Setup Pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./target

  lighthouse:
    name: Lighthouse CI
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: github-pages
          path: ./lighthouse-target

      - name: Extract artifact
        run: |
          cd lighthouse-target
          tar -xf artifact.tar
          cd ..

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./.github/lighthouse/lighthouserc.json"
          temporaryPublicStorage: true
          uploadArtifacts: true
          runs: 3

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
